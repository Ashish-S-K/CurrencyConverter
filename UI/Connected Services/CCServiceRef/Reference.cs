//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UI.CCServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CCServiceRef.ICurrencyConverter")]
    public interface ICurrencyConverter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConverter/GetResult", ReplyAction="http://tempuri.org/ICurrencyConverter/GetResultResponse")]
        string GetResult(string amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConverter/GetResult", ReplyAction="http://tempuri.org/ICurrencyConverter/GetResultResponse")]
        System.Threading.Tasks.Task<string> GetResultAsync(string amount);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyConverterChannel : UI.CCServiceRef.ICurrencyConverter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyConverterClient : System.ServiceModel.ClientBase<UI.CCServiceRef.ICurrencyConverter>, UI.CCServiceRef.ICurrencyConverter {
        
        public CurrencyConverterClient() {
        }
        
        public CurrencyConverterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyConverterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyConverterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyConverterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetResult(string amount) {
            return base.Channel.GetResult(amount);
        }
        
        public System.Threading.Tasks.Task<string> GetResultAsync(string amount) {
            return base.Channel.GetResultAsync(amount);
        }
    }
}
